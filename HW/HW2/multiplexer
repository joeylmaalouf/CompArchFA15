#! /usr/bin/vvp
:ivl_version "0.9.7 " "(v0_9_7)";
:vpi_time_precision + 0;
:vpi_module "system";
:vpi_module "v2005_math";
:vpi_module "va_math";
S_0x83a170 .scope module, "behavioralMultiplexer" "behavioralMultiplexer" 2 6;
 .timescale 0 0;
v0x83a860_0 .net "address", 1 0, L_0x86ce00; 1 drivers
v0x86b2d0_0 .net "address0", 0 0, C4<z>; 0 drivers
v0x86b370_0 .net "address1", 0 0, C4<z>; 0 drivers
v0x86b410_0 .net "in0", 0 0, C4<z>; 0 drivers
v0x86b4c0_0 .net "in1", 0 0, C4<z>; 0 drivers
v0x86b560_0 .net "in2", 0 0, C4<z>; 0 drivers
v0x86b640_0 .net "in3", 0 0, C4<z>; 0 drivers
v0x86b6e0_0 .net "inputs", 3 0, L_0x86cc40; 1 drivers
v0x86b7d0_0 .net "out", 0 0, L_0x86cf30; 1 drivers
L_0x86cc40 .concat [ 1 1 1 1], C4<z>, C4<z>, C4<z>, C4<z>;
L_0x86ce00 .concat [ 1 1 0 0], C4<z>, C4<z>;
L_0x86cf30 .part/v L_0x86cc40, L_0x86ce00, 1;
S_0x83b170 .scope module, "testMultiplexer" "testMultiplexer" 2 43;
 .timescale 0 0;
v0x86c750_0 .var "address0", 0 0;
v0x86c7d0_0 .var "address1", 0 0;
v0x86c850_0 .var/i "i", 31 0;
v0x86c8d0_0 .var "in0", 0 0;
v0x86c9b0_0 .var "in1", 0 0;
v0x86ca60_0 .var "in2", 0 0;
v0x86cae0_0 .var "in3", 0 0;
v0x86cb90_0 .net "out", 0 0, L_0x86db30; 1 drivers
S_0x86b870 .scope module, "multiplexer" "structuralMultiplexer" 2 49, 2 15, S_0x83b170;
 .timescale 0 0;
L_0x86bfd0/d .functor NOT 1, v0x86c750_0, C4<0>, C4<0>, C4<0>;
L_0x86bfd0 .delay (50,50,50) L_0x86bfd0/d;
L_0x86d0f0/d .functor NOT 1, v0x86c7d0_0, C4<0>, C4<0>, C4<0>;
L_0x86d0f0 .delay (50,50,50) L_0x86d0f0/d;
L_0x86d1e0/d .functor AND 1, L_0x86bfd0, L_0x86d0f0, C4<1>, C4<1>;
L_0x86d1e0 .delay (50,50,50) L_0x86d1e0/d;
L_0x86d320/d .functor AND 1, L_0x86bfd0, v0x86c7d0_0, C4<1>, C4<1>;
L_0x86d320 .delay (50,50,50) L_0x86d320/d;
L_0x86d3c0/d .functor AND 1, v0x86c750_0, L_0x86d0f0, C4<1>, C4<1>;
L_0x86d3c0 .delay (50,50,50) L_0x86d3c0/d;
L_0x86d490/d .functor AND 1, v0x86c750_0, v0x86c7d0_0, C4<1>, C4<1>;
L_0x86d490 .delay (50,50,50) L_0x86d490/d;
L_0x86d6c0/d .functor AND 1, L_0x86d1e0, v0x86c8d0_0, C4<1>, C4<1>;
L_0x86d6c0 .delay (50,50,50) L_0x86d6c0/d;
L_0x86d760/d .functor AND 1, L_0x86d3c0, v0x86c9b0_0, C4<1>, C4<1>;
L_0x86d760 .delay (50,50,50) L_0x86d760/d;
L_0x86d8f0/d .functor AND 1, L_0x86d320, v0x86ca60_0, C4<1>, C4<1>;
L_0x86d8f0 .delay (50,50,50) L_0x86d8f0/d;
L_0x86d9f0/d .functor AND 1, L_0x86d490, v0x86cae0_0, C4<1>, C4<1>;
L_0x86d9f0 .delay (50,50,50) L_0x86d9f0/d;
L_0x86db90/d .functor XOR 1, L_0x86d6c0, L_0x86d8f0, C4<0>, C4<0>;
L_0x86db90 .delay (50,50,50) L_0x86db90/d;
L_0x86dc80/d .functor XOR 1, L_0x86d760, L_0x86d9f0, C4<0>, C4<0>;
L_0x86dc80 .delay (50,50,50) L_0x86dc80/d;
L_0x86db30/d .functor XOR 1, L_0x86db90, L_0x86dc80, C4<0>, C4<0>;
L_0x86db30 .delay (50,50,50) L_0x86db30/d;
v0x86b960_0 .net "A0andA1", 0 0, L_0x86d490; 1 drivers
v0x86ba20_0 .net "A0andA1andin3", 0 0, L_0x86d9f0; 1 drivers
v0x86bac0_0 .net "A0andnA1", 0 0, L_0x86d3c0; 1 drivers
v0x86bb60_0 .net "A0andnA1andin1", 0 0, L_0x86d760; 1 drivers
v0x86bbe0_0 .net "address0", 0 0, v0x86c750_0; 1 drivers
v0x86bc80_0 .net "address1", 0 0, v0x86c7d0_0; 1 drivers
v0x86bd20_0 .net "ai0xorai1", 0 0, L_0x86db90; 1 drivers
v0x86bdc0_0 .net "ai2xorai3", 0 0, L_0x86dc80; 1 drivers
v0x86beb0_0 .net "in0", 0 0, v0x86c8d0_0; 1 drivers
v0x86bf50_0 .net "in1", 0 0, v0x86c9b0_0; 1 drivers
v0x86c050_0 .net "in2", 0 0, v0x86ca60_0; 1 drivers
v0x86c0f0_0 .net "in3", 0 0, v0x86cae0_0; 1 drivers
v0x86c200_0 .net "nA0", 0 0, L_0x86bfd0; 1 drivers
v0x86c2a0_0 .net "nA0andA1", 0 0, L_0x86d320; 1 drivers
v0x86c3c0_0 .net "nA0andA1andin2", 0 0, L_0x86d8f0; 1 drivers
v0x86c460_0 .net "nA0andnA1", 0 0, L_0x86d1e0; 1 drivers
v0x86c320_0 .net "nA0andnA1andin0", 0 0, L_0x86d6c0; 1 drivers
v0x86c5b0_0 .net "nA1", 0 0, L_0x86d0f0; 1 drivers
v0x86c6d0_0 .alias "out", 0 0, v0x86cb90_0;
    .scope S_0x83b170;
T_0 ;
    %vpi_call 2 52 "$display", "Concise Table:";
    %vpi_call 2 53 "$display", "A1 A0 | I0 I1 I2 I3 | O | Expected Output";
    %set/v v0x86c7d0_0, 0, 1;
    %set/v v0x86c750_0, 0, 1;
    %load/v 8, v0x86c7d0_0, 1;
    %mov 9, 0, 4;
    %muli 8, 2, 5;
    %load/v 13, v0x86c750_0, 1;
    %mov 14, 0, 4;
    %muli 13, 1, 5;
    %add 8, 13, 5;
    %vpi_call 2 55 "$display", " %b  %b |  X  X  X  X | X | Input%d", v0x86c7d0_0, v0x86c750_0, T<8,5,u>;
    %set/v v0x86c7d0_0, 0, 1;
    %set/v v0x86c750_0, 1, 1;
    %load/v 8, v0x86c7d0_0, 1;
    %mov 9, 0, 4;
    %muli 8, 2, 5;
    %load/v 13, v0x86c750_0, 1;
    %mov 14, 0, 4;
    %muli 13, 1, 5;
    %add 8, 13, 5;
    %vpi_call 2 57 "$display", " %b  %b |  X  X  X  X | X | Input%d", v0x86c7d0_0, v0x86c750_0, T<8,5,u>;
    %set/v v0x86c7d0_0, 1, 1;
    %set/v v0x86c750_0, 0, 1;
    %load/v 8, v0x86c7d0_0, 1;
    %mov 9, 0, 4;
    %muli 8, 2, 5;
    %load/v 13, v0x86c750_0, 1;
    %mov 14, 0, 4;
    %muli 13, 1, 5;
    %add 8, 13, 5;
    %vpi_call 2 59 "$display", " %b  %b |  X  X  X  X | X | Input%d", v0x86c7d0_0, v0x86c750_0, T<8,5,u>;
    %set/v v0x86c7d0_0, 1, 1;
    %set/v v0x86c750_0, 1, 1;
    %load/v 8, v0x86c7d0_0, 1;
    %mov 9, 0, 4;
    %muli 8, 2, 5;
    %load/v 13, v0x86c750_0, 1;
    %mov 14, 0, 4;
    %muli 13, 1, 5;
    %add 8, 13, 5;
    %vpi_call 2 61 "$display", " %b  %b |  X  X  X  X | X | Input%d", v0x86c7d0_0, v0x86c750_0, T<8,5,u>;
    %vpi_call 2 62 "$display", "Full Table:";
    %vpi_call 2 63 "$display", "A1 A0 | I0 I1 I2 I3 | O | Expected Output";
    %set/v v0x86c850_0, 0, 32;
T_0.0 ;
    %load/v 8, v0x86c850_0, 32;
   %cmpi/s 8, 64, 32;
    %jmp/0xz T_0.1, 5;
    %ix/load 1, 5, 0;
    %mov 4, 0, 1;
    %jmp/1 T_0.2, 4;
    %load/x1p 8, v0x86c850_0, 1;
    %jmp T_0.3;
T_0.2 ;
    %mov 8, 2, 1;
T_0.3 ;
; Save base=8 wid=1 in lookaside.
    %set/v v0x86c7d0_0, 8, 1;
    %ix/load 1, 4, 0;
    %mov 4, 0, 1;
    %jmp/1 T_0.4, 4;
    %load/x1p 8, v0x86c850_0, 1;
    %jmp T_0.5;
T_0.4 ;
    %mov 8, 2, 1;
T_0.5 ;
; Save base=8 wid=1 in lookaside.
    %set/v v0x86c750_0, 8, 1;
    %ix/load 1, 3, 0;
    %mov 4, 0, 1;
    %jmp/1 T_0.6, 4;
    %load/x1p 8, v0x86c850_0, 1;
    %jmp T_0.7;
T_0.6 ;
    %mov 8, 2, 1;
T_0.7 ;
; Save base=8 wid=1 in lookaside.
    %set/v v0x86c8d0_0, 8, 1;
    %ix/load 1, 2, 0;
    %mov 4, 0, 1;
    %jmp/1 T_0.8, 4;
    %load/x1p 8, v0x86c850_0, 1;
    %jmp T_0.9;
T_0.8 ;
    %mov 8, 2, 1;
T_0.9 ;
; Save base=8 wid=1 in lookaside.
    %set/v v0x86c9b0_0, 8, 1;
    %ix/load 1, 1, 0;
    %mov 4, 0, 1;
    %jmp/1 T_0.10, 4;
    %load/x1p 8, v0x86c850_0, 1;
    %jmp T_0.11;
T_0.10 ;
    %mov 8, 2, 1;
T_0.11 ;
; Save base=8 wid=1 in lookaside.
    %set/v v0x86ca60_0, 8, 1;
    %load/v 8, v0x86c850_0, 1; Only need 1 of 32 bits
; Save base=8 wid=1 in lookaside.
    %set/v v0x86cae0_0, 8, 1;
    %delay 1000, 0;
    %load/v 8, v0x86c7d0_0, 1;
    %mov 9, 0, 4;
    %muli 8, 2, 5;
    %load/v 13, v0x86c750_0, 1;
    %mov 14, 0, 4;
    %muli 13, 1, 5;
    %add 8, 13, 5;
    %vpi_call 2 72 "$display", " %b  %b |  %b  %b  %b  %b | %b | Input%d", v0x86c7d0_0, v0x86c750_0, v0x86c8d0_0, v0x86c9b0_0, v0x86ca60_0, v0x86cae0_0, v0x86cb90_0, T<8,5,u>;
    %ix/load 0, 1, 0;
    %load/vp0/s 8, v0x86c850_0, 32;
    %set/v v0x86c850_0, 8, 32;
    %jmp T_0.0;
T_0.1 ;
    %end;
    .thread T_0;
# The file index is used to find the file name in the following table.
:file_names 3;
    "N/A";
    "<interactive>";
    "multiplexer.v";
